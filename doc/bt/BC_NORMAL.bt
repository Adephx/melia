//--------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: BC_NORMAL.bt
//   Authors: exec, celophi
//   Version: i170175
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "common.bt"

short op;
int sequence;
short size;

int type;
switch(type)
{
    // Set Position
	// Notifies the client that the server successfully set the barrack
	// position for an actor.
	case 0x02:
        int64 accountId;
		byte barrackIndex;
		position pos;
        break;
		
    case 0x04:
        int64 accountId;
        int barrackMapId; // ? matches id, but doesn't seem to work
        byte bin1[5];
        break;
		
    case 0x08:
		int64 accountId;
		int i1;
        break;
		
    // Message Box
    case 0x10:
        if (!checkCompression())
        {
            byte b1;
            int i1;
            int messageCount;
            if (messageCount != 0)
                Message messages[messageCount] <optimize=false>;
        }
        break;

    // Message Box item update
    case 0x13:
        int64 messageId;
        byte b1;
        int i1;
        int itemCount;
        if (itemCount != 0)
            MessageItem items[itemCount] <optimize=false>;
        break;
		
	// Team UI
	// Updates the client UI with character slots, team experience,
	// names, etc.
    case 0x0B:
        int64 accountId;
		short purchasedBarrackSlots;
		int teamExp;
		short characterCount;
        break;
		
	// Zone traffic
    case 0x0C:
        byte bin1[size-12]; // zipped zone information
        break;

    // Enable packets from client to barrack.
    // (CB packets are disabled normally after connecting to the zone server.)
    case 0x0E:
        break;
		
	// Run lua function
    case 0x0F:
        lpString function; // ? (THEMA_BUY_SUCCESS)
        break;
		
	// Login queue
    case 0x14:
        int currentPosition;
        break;

    // Client integrity check failure.
    // The client will respond with CB_CLIENT_INTEGRITY_FAIL
    case 0x18:
        break;
}
