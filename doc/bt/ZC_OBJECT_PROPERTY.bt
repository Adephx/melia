//--------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: ZC_OBJECT_PROPERTY.bt
//   Authors: Tachiorz, exec
//   Version:
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "common.bt"

enum OBJP_TYPES { OBJP_FLOAT, OBJP_INT, OBJP_STRING };

typedef struct 
{
    int id; // [i170175] short->int
    switch(getPropertyType(id)) {
        case OBJP_STRING:
            lpString val;
            break;
        case OBJP_INT:
            int32 val;
            break;
        case OBJP_FLOAT:
            float val;
            break;
    }
}
property <read=propertyRead, optimize=false>;

string propertyRead(property &p)
{
    local char ret[];
    local char val_type[];
    
    switch(getPropertyType(p.id)) {
        case OBJP_STRING:
            SPrintf(ret, "%d : %s ", p.id, p.val.text);
            break;
        case OBJP_INT:
            SPrintf(ret, "%d : %d" , p.id, p.val);
            break;
        case OBJP_FLOAT:
            SPrintf(ret, "%d : %.0f" , p.id, p.val);
            break;
    }

    return ret;
}

int getPropertyType(int id)
{
    switch(id) {
        case 41: 
        case 4591:
        case 7118:
            return OBJP_STRING;
            break;
        case 4601:
            return OBJP_INT;
            break;
        default:
            return OBJP_FLOAT;
            break;
    }
}

short op;
int sequence;
short size;

int64 characterId;
int i1; // [i170175]

local int i;
for (i = 0; i < (size - 20); i = i)
{
    property prop;
    i += sizeof(prop);
}
